name: Master

on:
  push:
    branches:
      [master, main]

jobs:
  build-gcc:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        gcc_v: [9,10,11,12]
        python-version: ['3.9']
        exclude:
          - gcc_v: 12
            os: ubuntu-20.04
          - gcc_v: 11
            os: ubuntu-20.04
    env:
      FC: gfortran
      GCC_V: ${{ matrix.gcc_v }}
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install python dependencies
        run: |
          pip install --upgrade -r tests/python-requirements.txt
      - name: Install compiler and libraries
        run: |
          sudo apt-get install -y gfortran-${GCC_V}
          sudo apt-get install -y libblas-dev liblapack-dev make
      - name: Compile
        run: |
          make -f Makefile.gnu FC=gfortran-${GCC_V} \
            FC90=gfortran-${GCC_V} LINKER=gfortran-${GCC_V}
      - name: Run the tests
        run: |
          source tag.sh
          $MCDHOME/tests/run-mcd-tests.sh

  build-intel-oneapi:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-20.04]
        python-version: ['3.9']
    env:
      CC: icx
      CXX: icpx
      FC: ifort
      BASE_DIR: /opt/intel/oneapi/compiler/latest/linux
      INSTALL_PATH: /opt/intel/oneapi/compiler/latest/linux/bin/intel64
      MKLROOT: /opt/intel/oneapi/mkl/latest
      LD_LIBRARY_PATH: /opt/intel/oneapi/mkl/latest/lib/intel64:/opt/intel/oneapi/compiler/latest/linux/compiler/lib/intel64:/opt/intel/oneapi/compiler/latest/linux/ipp/lib/intel64
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install python dependencies
        run: |
          pip install --upgrade -r tests/python-requirements.txt
      - name: Add Intel oneAPI to apt
        run: |
          wget https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          sudo apt-key add GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          rm GPG-PUB-KEY-INTEL-SW-PRODUCTS-2023.PUB
          echo "deb https://apt.repos.intel.com/oneapi all main" | sudo tee /etc/apt/sources.list.d/oneAPI.list
          sudo apt-get update
      - name: Install Intel oneAPI
        run: |
          sudo apt-get install intel-oneapi-mkl-devel \
                intel-oneapi-compiler-fortran
      - name: Setup Intel oneAPI environment
        run: |
          source /opt/intel/oneapi/setvars.sh
          source /opt/intel/oneapi/mkl/latest/env/vars.sh
          echo "Checking LD_LIBRARY_PATH"
          echo $LD_LIBRARY_PATH
      - name: Debugging
        run: |
          echo 'Running export | grep "intel" -i'
          export | grep "intel" -i
          echo "Checking LD_LIBRARY_PATH"
          echo $LD_LIBRARY_PATH
          echo "List /opt/intel/oneapi/compiler/latest/linux/compiler/lib/"
          ls -lR /opt/intel/oneapi/compiler/latest/linux/compiler/lib/
          echo "List MKLROOT"
          ls -lR $MKLROOT
      - name: Compile
        run: |
          make -f Makefile.ifort FC=${{ env.INSTALL_PATH }}/ifort \
                  FC90=${{ env.INSTALL_PATH }}/ifort \
                  LINKER=${{ env.INSTALL_PATH }}/ifort
      - name: Run the tests
        run: |
          source tag.sh
          $MCDHOME/tests/run-mcd-tests.sh

  publish-docs:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    name: Publish Docs
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Setup Python env
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install Pandoc
        run: sudo apt-get install -y pandoc
      - name: Debug
        run: |
          pwd
          ls -la
          ls tests
      - name: Install Dependencies
        run: |
          pip install --upgrade -r tests/python-requirements.publish.txt -r tests/python-requirements.txt
      - name: Sphinx build
        run: |
          sphinx-build docs/source _build
      - name: Debug
        run: |
          pwd
          ls -la
      - name: Deploy
        uses: peaceiris/actions-gh-pages@v3
        if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/master' }}
        with:
          publish_branch: gh-pages
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: _build/
          force_orphan: true

